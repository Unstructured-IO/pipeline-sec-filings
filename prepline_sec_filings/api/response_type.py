#####################################################################
# THIS FILE IS AUTOMATICALLY GENERATED BY UNSTRUCTURED API TOOLS.
# DO NOT MODIFY DIRECTLY
#####################################################################

import os
import inspect
from typing import List

from fastapi import status, FastAPI, File, Form, Request, UploadFile
from slowapi.errors import RateLimitExceeded
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from fastapi.responses import PlainTextResponse

limiter = Limiter(key_func=get_remote_address)
app = FastAPI()
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

RATE_LIMIT = os.environ.get("PIPELINE_API_RATE_LIMIT", "1/second")


def is_expected_response_type(media_type, response_type):
    if media_type == "application/json" and response_type != dict:
        return True
    elif media_type == "text/csv" and response_type != str:
        return True
    else:
        return False


# pipeline-api
def pipeline_api(text, response_type="text/csv", m_section=[], m_section_regex=[]):
    if response_type == "application/json":
        return {"text": "hello world"}
    elif response_type == "text/csv":
        # comment this out to test conflict response type
        # return {"text" : "hello world"}
        return "hello world"
    else:
        # should report error this case
        return "unsupported response type"


@app.post("/sec-filings/v0.0.2/response-type")
@limiter.limit(RATE_LIMIT)
async def pipeline_1(
    request: Request,
    file: UploadFile = File(),
    section: List[str] = Form(default=[]),
    section_regex: List[str] = Form(default=[]),
):

    media_type = request.headers.get("Accept")
    default_response_type = "text/csv"
    media_type = default_response_type if media_type == "*/*" else media_type

    text = file.file.read().decode("utf-8")

    response = pipeline_api(
        text,
        m_section=section,
        m_section_regex=section_regex,
        response_type=media_type,
    )

    if is_expected_response_type(media_type, type(response)):
        return PlainTextResponse(
            content=f"Conflict in media type {media_type} with response type {type(response)}.\n",
            status_code=status.HTTP_406_NOT_ACCEPTABLE,
        )
    valid_response_types = ["application/json", "text/csv", "*/*"]
    if media_type in valid_response_types:
        return response
    else:
        return PlainTextResponse(
            content=f"Unsupported media type {media_type}.\n",
            status_code=status.HTTP_406_NOT_ACCEPTABLE,
        )


@app.get("/healthcheck", status_code=status.HTTP_200_OK)
@limiter.limit(RATE_LIMIT)
async def healthcheck(request: Request):
    return {"healthcheck": "HEALTHCHECK STATUS: EVERYTHING OK!"}
